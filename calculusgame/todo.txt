
- Nav bugfixes - distance resets
- Quad puzzles, quad lab, ... this is beyond the demo. Just have arriving at quad planet be the end of the demo
- Dev tools to skip levels

- Post puzzle solve, next arrow that walks you to the next puzzle
- Scene transitions from map to puzzle. Same for ship and lab
- Navigation should have an intermediate scene, to show the current engine speed
    Then you don't need the progress bar in the nav scene
- Element highlights
- Experiment scene fix

--------------------
Essential:
- Chain rule map
- Chain rule puzzles
- English dialogue
- Improve rule scene, celebration on complete, tells you that quadratic is unlocked
- Lab auto-measure for chain rule

Post demo?:
- Map and puzzles for quad, power, exp, sin, sum, prod, chain 



Optional
- Item get
- Journal update
- Screen transitions - medium, easy to wipe to black and then wipe in scene, harder to wipe scene to scene. Zoom out from landing pad.
- Improve planet map. has progress, has lines
- Drawing puzzles - easy
- Mathblock destructive - medium
- Sandbox mode: set f(x) and f'(x) - easy
- Map elements highlight when moused over, rather than having buttons. Could put stuff behind computer screen, either numbers or just plain color
    I like numbering the levels. Put a rectangular or oval light ray type highlight, largest would be in progress, no highlight for locked, and blue for complete? 
    would be best if it moves - to draw the eye 
- UI element borders - easy
- Curated nav puzzles - to avoid the wild ones
- Alien language for math symbols
- Render maps for shadows - might have weird interactions with the path

Experiment improvemnets:
- Square graphs
- Sliders show current value
- 

UI Improvements:
- Exit after puzzles solved
- Mathblocks shrink when max size is reached

Maps:
Conifer forest
Mountain with stone
Pink trees
Desert
Lake, boardwalk, lilypads
Beach

----------------------------



BUGS / Issues:

- sin( e^x ), sin( any large function ) becomes a hash,
     solution: detect these functions and remove targets in affected range
     solution 2: do not allow sine ( any value over 1000 ) 
     solution 3: tall targets - for sine ( f(x) ) if |ddx f(x)| > 10, make the targets cover the affected range...
     Make the targets tall enough to connect from previous to next...
     If it is just sine that has this issue, it should be solveable since -1 < sine < 1

- Mouse inputs on last frame of scene carry over into new scene. Solution: freeze mouse input for a bit on scene change.
    Can implement this with scene transitions

Other UI elements list:

- Rule mode for mathblocks: rather than constructing mathblock functions, start with the f(x) and
    apply rules until you get to f'(x). There would be a toggle next to the toolbar that switches to 
    rules. You click on the rule and then the block you want to apply it to. There could be some sort of 
    coloring that helps you keep track of which blocks you have ddxed so far.

- Draw mode for puzzles: Allows you to set a lot of slider-like objects easily. Rather than using Slider
    just make a new object that attaches to the grid and draws the circles or squares. The y would be set 
    for each x whenever the mouse is down and over the grid. Like if (mouse is down and over grid) set grid x = y

Quality of life improvements:

- Integral tracer starts at first point on nav grid (improves qol since an incorrect function is more likely to be visible)
- Mathblocks can attach as parents
- Mathblocks auto fill with x's (when there is no child)
- Click on a block to copy its scale and translate? Or just give a copy paste ability...

Accessibility:
- Keyboard controls
- Mobile ?


Aspect ratio:
Black bars are fine for now, 